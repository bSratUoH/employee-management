AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  employeeManagement

  Sample SAM Template for employeeManagement

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

Resources:
  EmployeeDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: employee
      AttributeDefinitions: 
        - AttributeName: regId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema: 
        - AttributeName: regId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: EmployeeEmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  
  EmployeeFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !GetAtt EmployeeDDBTable.Arn
                  - !Sub ${EmployeeDDBTable.Arn}/index/*
                  # - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books/index/*"

  CreateEmployees:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda_functions/create_employees
      FunctionName: createEmployeeDetails
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt EmployeeFunctionsRole.Arn
      Layers:
        - !Ref EmployeeLambdaLayer
      Events:
        Post:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref EmployeeAPIGateway
            Path: /employees
            Method: post
            RequestModel:
              Model: CreateEmployeeModel
              Required: true
              ValidateBody: true
              ValidateParameters: true

  DeleteEmployees:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda_functions/delete_employees
      FunctionName: deleteEmployeeDetails
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt EmployeeFunctionsRole.Arn
      Layers:
        - !Ref EmployeeLambdaLayer
      Events:
        Delete:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref EmployeeAPIGateway
            Path: /employees
            Method: delete

  GetEmployees:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda_functions/get_employees
      FunctionName: getEmployeesDetails
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt EmployeeFunctionsRole.Arn
      Layers:
        - !Ref EmployeeLambdaLayer
      Events:
        Get:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref EmployeeAPIGateway
            Path: /employees
            Method: get
            
  UpdateEmployee:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda_functions/update_employees
      FunctionName: updateEmployeeDetails
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt EmployeeFunctionsRole.Arn
      Layers:
        - !Ref EmployeeLambdaLayer
      Events:
        Update:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref EmployeeAPIGateway
            Path: /employees
            Method: put
            RequestModel:
              Model: UpdateEmployeeModel
              Required: true
              ValidateBody: true
              ValidateParameters: true

  EmployeeLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: employeeLambdaLayer
      ContentUri: lambda_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  EmployeeAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: employeeManagement
      StageName: DEV
      Models:
        UpdateEmployeeModel:
          type: object
          properties:
            name:
              type: string
            regId:
              type: string
            email:
              type: string
            age:
              type: integer
            gender:
              type: string
            phoneNo:
              type: string
            addressDetails: 
              type: object
              properties:
                hno:
                  type: string
                street:
                  type: string
                city:
                  type: string
                state:
                  type: string
            workExperience:
              type: array
              items:
                type: object
                properties:
                  companyName:
                    type: string
                  fromDate:
                    type: string
                  toDate:
                    type: string
                  address:
                    type: string
            qualifications:
              type: array
              items:
                type: object
                properties:
                  qualificationName:
                    type: string
                  fromDate:
                    type: string
                  toDate:
                    type: string
                  percentage:
                    type: integer
            projects:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
            photo:
              type: string
          required:
            - name
            - email
            - age
            - gender
            - phoneNo
            - addressDetails
            - workExperience
            - qualifications
            - projects
            - photo
            - regId

        CreateEmployeeModel:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            age:
              type: integer
            gender:
              type: string
            phoneNo:
              type: string
            addressDetails: 
              type: object
              properties:
                hno:
                  type: string
                street:
                  type: string
                city:
                  type: string
                state:
                  type: string
            workExperience:
              type: array
              items:
                type: object
                properties:
                  companyName:
                    type: string
                  fromDate:
                    type: string
                  toDate:
                    type: string
                  address:
                    type: string
            qualifications:
              type: array
              items:
                type: object
                properties:
                  qualificationName:
                    type: string
                  fromDate:
                    type: string
                  toDate:
                    type: string
                  percentage:
                    type: integer
            projects:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
            photo:
              type: string
          required:
            - name
            - email
            - age
            - gender
            - phoneNo
            - addressDetails
            - workExperience
            - qualifications
            - projects
            - photo